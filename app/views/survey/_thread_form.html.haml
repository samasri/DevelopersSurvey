-url = 'https://stackoverflow.com/questions/' + @threadID
- page = Nokogiri::HTML(open(url))

-# Remove all StackOverFlow JavaScript
- nodes = []
- page.css('head')[0].children.each do |child|
	- if child.name == 'meta' or child.name == 'link' then nodes.push(child) end
- head = page.css('head')[0]
- head.inner_html = ''
- nodes.each do |node| head.add_child node end
- body = page.css('body')[0]
- body.children.each do |child|
	- if child.name == 'script' or child.name == 'noscript' then child.remove end

-# Add our stylesheets and JavaScript
- additions = stylesheet_link_tag    'application', media: 'all'
- additions += javascript_include_tag 'application'
- additions += csrf_meta_tags
- head.inner_html += additions
-#
- def removeIfExist(page, componentSpecifier)
	- multiple = false
	- if componentSpecifier[0] == '.' then multiple = true end
	- component = page.css(componentSpecifier)
	- if multiple 
		- unless component.empty?
			- component.each do |cmp| cmp.remove end
	- unless multiple
		- unless component.empty?
			- component[0].remove


-# Removing unnecessary components
-# removeIfExist(page, '#left-sidebar')
-# removeIfExist(page, '#sidebar')
- removeIfExist(page, '#js-gdpr-consent-banner')
- removeIfExist(page, '#dfp-tlb')
- removeIfExist(page, '#post-form')
- removeIfExist(page, '#tabs')
- removeIfExist(page, '#custom-header')
- removeIfExist(page, '#dfp-mlb') # Remove empty div space
- removeIfExist(page, '.comment-user')
- removeIfExist(page, '.post-signature')
- removeIfExist(page, '.pl8') # Remove 'Ask Question' button

-# Highlighting questions
- def searchArray(arr, key)
	- arr.each do |a|
		- if a.to_s == key.to_s then return true end
	- return false

- @sentences.each do |answerID, sentenceTexts|
	- sentenceTexts.each do |sentenceContainer|
		- sentence_id = sentenceContainer[0]
		- sentence_text = sentenceContainer[1]	
		- searchResult = searchArray(session[:answeredSentences], sentence_id)
		- if searchResult # Responses for this sentence have already been submitted
			- sentenceReplacement = '<mark style="background-color: grey">' + sentence_text + '</mark>'
		- else # Responses for this sentence have not been submitted yet
			- btn = link_to sentence_text, responses_new_path(:picked_sentence => { :sentence_id => sentence_id.to_s}), remote: true
			- sentenceReplacement = '<mark>' + btn + '</mark>'
		- highlightedAnswer = page.css('#' + answerID)[0].inner_html.gsub(sentence_text, sentenceReplacement)
		- page.css('#' + answerID)[0].inner_html = highlightedAnswer

-# Calculate the number of highlighted sentences that the user have to address to continue
- questionsLeft = session[:toAnswer] - session[:answeredSentences]
- questionsLeft = questionsLeft.count

-# Reuse right side bar for response form
- rightSideBar = page.css('#sidebar')[0]
- rightSideBar[:class] = 'left-sidebar--sticky-container js-sticky-leftnav'
- unless questionsLeft == 0
	- rightSideBar.inner_html = '<h1> Click on a highlighted sentence to get questions (' + questionsLeft.to_s + ' sentences left) </h1>'
- else
	- rightSideBar.inner_html = '<h1> All sentences are Answered. Click on "Next Thread" button on the left to continue </h1>'

-# Change width ratio between main div and right sidebar (now used as form)
- rightSideBar[:style] = 'width: 400px;'
- page.css('#mainbar')[0][:style] = 'width: calc(100% - 400px - 24px);'

-# Reuse left side bar for a navigation button
- leftSideBar = page.css('#left-sidebar')
- if leftSideBar.empty? then # Not a thread page, ignore it
- else
	-# Delete all divs inside the left side bar
	- leftSideBar = leftSideBar[0]
	- leftSideBar.children.each do |child| child.remove end
	-# Create new button and add it to the left side bar
	- btn = Nokogiri::XML::Node.new('div', page)
	- btn['class'] = 'left-sidebar--sticky-container js-sticky-leftnav'
	- leftSideBar.add_child(btn)
	-# Fill button with the right HTML
	- if questionsLeft == 0
		- btn.inner_html = link_to 'Next Thread', @nextPath, method: :post, style: 'color: white', class: 'btn btn-primary'
	- else
		- btn.inner_html = 'Answer ' + questionsLeft.to_s + ' more sentences to proceed'
		- btn[:class] = 'btn btn-primary'

= html = page.to_html.html_safe